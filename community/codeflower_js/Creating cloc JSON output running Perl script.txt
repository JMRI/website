January 13, 2017 Egbert Broerse (C)

In cloc.pl, after line 5290 insert:
     <code>'shtml' => 'HTML' ,</code>
to include our flavor of html.

cd to folder containing your JMRI repo
In the Console type:
<code>perl cloc.pl JMRI/java --csv --by-file --report-file=java.cloc</code>

[counting]
   12546 text files.
   11295 unique files.                                          
    3803 files ignored.
Wrote jmri.cloc

Paste contents into field (Origins: clog) on http://www.redotheweb.com/CodeFlower/
Click the [Convert] button (Optionally, click [Update] to see the new data displayed on the page).
Copy the JSON data from the Input Data Format field into a separate file.
Follow further instructions on the page:
To create a CodeFlower, include the CodeFlower.js file together with d3.js, just like in this page. Create a new CodeFlower instance using a CSS selector (of the div where the flower should be inserted), and the width and height of the desired visualization. Then, bind JSON data to the flower using CodeFlower.update(), and you're done.
<code>var myFlower = new CodeFlower("#visualization", 300, 200);</code>
<code>myflower.update(jsonData);</code>

Credits:
<h2>Licence</h2>
        <p>All this work is open-source, published by <a href="https://twitter.com/francoisz">François Zaninotto</a> under the MIT license.</p>


Page source essence:
        <div id="visualization"></div>

    <script type="text/javascript" src="javascripts/d3/d3.js"></script>
    <script type="text/javascript" src="javascripts/d3/d3.geom.js"></script>
    <script type="text/javascript" src="javascripts/d3/d3.layout.js"></script>
    <script type="text/javascript" src="javascripts/CodeFlower.js"></script>
    <script type="text/javascript" src="javascripts/dataConverter.js"></script>
    <script type="text/javascript">
      var currentCodeFlower;
      var createCodeFlower = function(json) {
        // update the jsonData textarea
        document.getElementById('jsonData').value = JSON.stringify(json);
        // remove previous flower to save memory
        if (currentCodeFlower) currentCodeFlower.cleanup();
        // adapt layout size to the total number of elements
        var total = countElements(json);
        w = parseInt(Math.sqrt(total) * 30, 10);
        h = parseInt(Math.sqrt(total) * 30, 10);
        // create a new CodeFlower
        currentCodeFlower = new CodeFlower("#visualization", w, h).update(json);
      };

      d3.json('data.json', createCodeFlower);

      document.getElementById('project').addEventListener('change', function() {
        d3.json(this.value, createCodeFlower);
      });
      document.getElementById('jsonInput').addEventListener('submit', function(e) {
        e.preventDefault();
        document.getElementById('visualization').scrollIntoView();
        var json = JSON.parse(document.getElementById('jsonData').value);
        currentCodeFlower.update(json);
      });
      document.getElementById('jsonConverter').addEventListener('submit', function(e) {
        e.preventDefault();
        var origin = this.children[0].children[0].value;
        var data = this.children[0].children[1].value;
        var json = convertToJSON(data, origin);
        document.getElementById('visualization').scrollIntoView();
        createCodeFlower(json);
      });
    </script>

Copy these scripts to the folder on your web server:
- CodeFlower.js
- d3.js

<h2>Licence</h2>
<p>CodeFlower is open-source, published by <a href="https://twitter.com/francoisz">François Zaninotto</a> under the MIT license. That means that nothing prevents you from growing as many CodeFlowers as you want!</p>

I had to make some changes to CodeFlower.js to show the late code set of JMRI inside a reasonable square:
line 19:  .charge(function(d) { return d._children ? -d.size / 100 : -40; }) // change 100:-40 to 100:-4 // -4 slows down the action but keeps the elements away from the edge
line 20:  .linkDistance(function(d) { return d.target._children ? 80 : 25; }) // change 80:25 to 8:25 // 8 keeps the items closer in the final state
line 40:  .gravity(Math.atan(total / 500) / Math.PI * 0.4) // change total/50 to /500 makes it more compact in equilibrium
line 72:  .attr("r", function(d) { return d.children ? 3.5 : Math.pow(d.size, 2/5) || 1; }) // change 2/5 to 1/5 (or use log for pow?) !keep the same as line 66